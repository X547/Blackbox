Dtf Subsystem
Developer Manual

This document describes the dtF driver for the BlackBox Sql subsystem.

The Mac OS driver currently works with the single-user PowerPC version of the dtF/Mac libraries only.

Contents
Overview
DataÂ types
ConnectingÂ toÂ aÂ dtFÂ database
dtFÂ configuration
InstallationÂ (WindowsÂ only)
dtFÂ client/serverÂ versionÂ (WindowsÂ only)
InstallationÂ (MacÂ OSÂ only)
DatabaseÂ #Â emptyÂ (MacÂ OSÂ only)
CreatingÂ standaloneÂ applicationsÂ (MacÂ OSÂ only)


Overview
The single-user version of dtF consists of a library (a DLL on Windows, code fragments on Mac OS), which implement the complete database functionality. The libraries directly manipulate the database files. The procedures exported by these libraries are the API of dtF. This API is used by BlackBox as well as by the sLab database tools.

Of the Windows DLL, there is a 16-bit version and a 32-bit version. BlackBox only uses the 32-bit version.

The Dtf subsystem contains drivers which import the DLLs and turn them into plug-ins for the Sql subsystem of BlackBox. These drivers conform to the SqlDriver.Driver interface.
The module DtfDriver is the driver for the single-user version of dtF and module DtfCDriver is the driver for the client/server version of dtF.

An evaluation version of the dtF libraries is available at http://www.slab.de.

Client dtF files for single-user version (Windows):
	Release 1.6x	Release 1.7x
	DTFERR.msg	DTFERR.msg
	DTFSETUP.std	DTFSETUP.std
	DTFSW3L1.dll	DTFSW3.dll
	DTFSW3L2.dll
	DTFSW3CR.dll
	Dtf/Code/Driver16	Dtf/Code/Driver

Client dtF files for client/server version (Windows):
	DTFERR.msg	DTFERR.msg
	DTFSETUP.std	DTFSETUP.std
	DTFLW3L1.dll	DTFLW3.dll
	DTFLW3L2.dll 
	DTFLW3CR.dll
	Dtf/Code/CDriver16	Dtf/Code/CDriver

Data types

The following table gives the mapping between Component Pascal and dtF SQL data types:

dtF	Component Pascal
{char, short, long, byte, word,
longword, smallint, integer, int}	{BYTE, SHORTINT, INTEGER, BOOLEAN(1)}
{real, float, double precision}	{SHORTREAL, REAL}
{character(n)(2), varchar(n)(2),
char(n)(2), char varying(n)(2),
shortstring(3)}	ARRAY OF CHAR
date	Dates.Date
time	Dates.Time
{decimal, dec, numeric}	Dialog.Currency
	Dialog.List (-> INTEGER)
	Dialog.Combo (-> ARRAY OF CHAR)
bit	SqlDB.Blob

(1)  0 = FALSE, 1 = TRUE
(2)  string which is filled up by blanks to n elements, n <= 250
(3)  0X-terminated string of at most 250 characters

Connecting to a dtF database

When opening a database, the datasource parameter has the following meaning:

Windows:
	datasource = project name
		if the project name is not found in the dtF setup file,
		e.g., because it is the empty string,
		then the default database is used

Mac OS:
	datasource = empty
		user will be asked with dialog box for the database files
		(.dtf and .bit)
	datasource # empty
		datasource is Mac OS path name
		(relative to BlackBox, or absolute path name)
		For more information, see Mac OS information further below

When opening a database, the protocol parameter may have the following values:

Windows:
	"DtfDriver"	to use stand-alone version of dtF (Release 1.7x)
	"DtfCDriver"	to use client/server (LAN) version of dtF (Release 1.7x)
	"DtfDriver16" to use stand-alone version of dtF (Release 1.6x)
	"DtfCDriver16"	to use client/server (LAN) version of dtF (Release 1.6x)

Mac OS:
	"DtfDriver"	to use stand-alone version of dtF

dtF currently does not support asynchronous operation. It is still possible to program in an asynchronous way, but the current version of the driver will not be able to take advantage of it.

dtF configuration

The dtF libraries can be configured for optimal performance.

Windows:
	The configuration parameters are contained in the Setup parameter file dtfsetup.std

Mac OS:
	The configuration parameters are contained in STR# string resources in the file Dtf/Rsrc/dtf.rsrc. 
	To change the values, use a tool like ResEdit. 
	
The configuration parameters are described in the online documentation that comes with the dtF libraries. Please refer to this documentation for a description of the parameters.

dtF internally provides a so-called workspace for each result table. By default, the maximum number of simultaneously open workspaces is less than 10. This value can be increased to at most 63 by changing the RESULTS parameter of the dtF configuration. If the limit is exceeded, dtF signals the "result overflow" exception (error 3902).
Sql uses at most one workspace per table, plus one further workspace for the currently executing statement. Sql performs some optimizations, e.g., an empty result table requires no workspace, and SqlDB.Table.Exec first releases the table's old workspace before generating a new one.

Note that SqlDB.Table.Clear frees the workspace of the table.

Installation (Windows only)

For the installation of the dtF libraries, please follow the instructions of the dtF libraries. A summary of these instructions is given in the following paragraph. To create or delete databases, and to create or delete tables in a database, use the dtF browser which comes with the dtF libraries.

Release 1.6x
For the installation of dtF, start dtfinst.exe on the first installation disk. First you have to specify the source drive, then the destination drive. Then you can choose the components which should be installed. In order to work with BlackBox, you don't need to install the dtF-API. Only choose the following entries:

â€¢ Install dtF Base System
â€¢ Install dtF tools and utilities
â€¢ Install documentation
â€¢ Install dtF 32-bit Windows Version

At the next question, leave all the options marked, i.e., "on" (modification of autoexec.bat and win.ini and the installation of a dtF Program Group). After successful installation, the computer must be restarted.

Release 1.7x
For the installation of the dtF libraries, start setup.exe. In order to work with BlackBox, install the dtF-SQL core components and dtF-SQL 32bit for Windows 95 or NT.

After the installation, a new database has to be created. Start the dtF-SQL browser and execute the command File->Create DB... and press the OK button. Now, a new database has been created.

In order to access the dtF-Sql database from within BlackBox, the dtF-Sql DLL has to be copied into a directory which is on the search path for BlackBox DLLs, e.g. into the Windows\System folder or into the BlackBox folder.


In order to run the examples provided by the Sql subsystem, some sample tables have to be created first. This can be done with the command
 DtfObxInit.Setup. The following two tables are created:

	CREATE TABE Companies
		(id	INTEGER,
		name	SHORTSTRING,
		ceo	SHORTSTRING,
		employees	INTEGER)

	CREATE TABLE Ownership
		(owner	INTEGER,
		owned	INTEGER,
		percent	INTEGER)

The module DtfObxInit is equivalent to the module SqlObxInit. The difference are the datatypes in the create table statements and the references to the protocol, datasource, id and password. These references have to be adapted in the modules SqlObxDB, SqlObxExt, and SqlObxGen as well in order to run the example:

		Release 1.6x	Release 1.7x
	protocol	"DtfDriver16"	"DtfDriver"
	datasource	"Default"	"Default" or ""
	id	"dtfadm"	"dtfadm"
	password	"dtfadm"	"dtfadm"

The tables can be inspected and modified using the database browser SqlBrowser. Just type an SQL query in the Statement field of the browser window and press return.

dtF client/server version (Windows only)

On the client side, the client/server version of dtF has the same structure as the single-user version. The corresponding DLLs export the same procedures as the single-user version does. However, they do not directly access the database, but forward the operations over a suitable channel to the server program. This server program can be installed on the same machine or on another machine. In the latter case, access happens via a network.

The only files which are used both for the single-user and the client/server version are the error text file DTFERR.msg and the configuration file DTFSETUP.std. The latter contains special entries for a variety of configurations.

As a consequence, both single-user and client/server version can be used simultaneously without interfering with each other.

Since there are four DLL versions of dtF (single-user or client/server, 16-bit or 32-bit), there are four browser versions as well, each importing the suitable set of DLLs. Make sure to use the correct browser for your databases!

Installation (Mac OS only)

For the installation of the dtF libraries, please follow the instructions in the "Read Me" file on disk 1 of the dtF libraries.

Then copy the shared library dtf_Glue.shlb from the folder Dtf/Glue to the Extensions folder of the System folder.

A set of examples is available in source form. In order to run the examples, you first have to install the dtF libraries and create a database. Create the database in the BlackBox folder and use the default names, "database.bit" and "database.dtF". The Sql subsystem refers to this database with the alias name "Default".

In order to run the examples provided by the Sql subsystem, some sample tables have to be created first. This can be done with the command
 SqlObxInit.Setup. The following two tables are created:

	CREATE TABE Companies
		(id	INTEGER,
		name	VARCHAR(255)
		ceo	VARCHAR(255)
		employees	INTEGER)

	CREATE TABLE Ownership
		(owner	INTEGER,
		owned	INTEGER,
		percent	INTEGER)

The modules SqlObxDB, SqlObxExt, SqlObxGen, and SqlObxInit contain references (protocol, datasource, id, password) which have to be adapted before using them:

	protocol	"DtfDriver"
	datasource	"Default"
	id	"dtfadm"
	password	"dtfadm"

The tables can be inspected and modified using the database browser SqlBrowser. Just type an SQL query in the Statement field of the browser window and press return.

Database # empty (Mac OS only)

When opening a database with SqlDB.OpenDatabase, the datasource parameter contains an alias name for an actual database file. The dtF driver looks up the string "#Dtf:datasource" using Dialog.MapString. The resource file Dtf/Rsrc/Strings contains the mapping from alias names to the actual path and file names of the database. An alias definition in the resource file consists of the alias name, followed by a tab and the relative (to the BlackBox folder) or absolute path name of the database files.

Default	:database
Sales	HD:Data:Sales:sales_db

The first example defines alias Default to point to the database files database.bit and database.dtF in the BlackBox folder. The second alias, Sales, points to the database files HD:Data:Sales:sales_db.bit and HD:Data:Sales:sales_db.dtF. Note that the trailing .bit and .dtF must not be contained in the alias definition. The driver will add them when connecting to the database.

When you change the alias declarations, you should flush the internal resource buffer (Dev->Flush Resources).

Creating standalone applications (Mac OS only)

When creating a linked, standalone application, you must copy the resources contained in the file Dtf/Rsrc/dtF.rsrc to your application.
